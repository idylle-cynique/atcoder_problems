# ABC223 - B

'''
右シフト処理、左シフト処理をそれぞれ一回ずつ行った時の文字列などを見ればわかるように、
左右シフト処理を組み合わせる必要はなく、左右シフト処理をどのように行っても、
想定される文字列の並びはいずれかのシフト処理を1～文字列Sの長さ回分行った分だけしかない
したがって、シフト処理を入力された文字列の長さ分だけ行い、候補となる文字列をリストに格納し
最後にソートを行った上で、リストの先頭にある文字列と末尾にある文字列を出力すればよい

なお、文字列の長さがより大きくソート時の計算がボトルネックとなるような場合は
辞書順最小となる文字列を格納する変数、辞書順最大となる文字列を格納する変数を用意し
ループ処理中に候補文字列との比較演算を行い、最後に辞書順最小・最大の文字列が残るようにすればよい
'''

from collections import deque 

S = deque(list(input()))
Strings = ["".join(S)] # 文字列候補リストを格納

for i in range(len(S)): # 順番に左シフト処理を文字列の長さ分だけ行っていく
    c = S.popleft()
    S.append(c)
    #print("".join(S))
    Strings.append("".join(S))

Strings = sorted(Strings) # 候補リストを辞書順にソート

print(Strings[0])  # 辞書順最小(リストの先頭)を出力
print(Strings[-1]) # 辞書順最大(リストの末尾)を出力